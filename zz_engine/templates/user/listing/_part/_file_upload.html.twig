<link rel="stylesheet" href="{{ asset('asset/lib/fileuploader/font/font-fileuploader.css') }}">
<link rel="stylesheet" href="{{ asset('asset/lib/fileuploader/jquery.fileuploader.min.css') }}">
<script src="{{ asset('asset/lib/fileuploader/jquery.fileuploader.min.js') }}"></script>

<script>
    $('#listing_file2').fileuploader({
        addMore: true,
        upload: {
            url: '{{ path('app_file_upload') }}',
            data: null,
            type: 'POST',
            enctype: 'multipart/form-data',
            start: true,
            synchron: true,
            beforeSend: null,
            onSuccess: function(data, item) {
                // if success
                if (data.isSuccess && data.files[0]) {
                    item.data.tmpFilePath = data.files[0].file;
                    item.name = data.files[0].old_name;
                    item.html.find('.column-title > div:first-child').text(item.name).attr('title', item.name);
                }

                // if warnings
                if (data.hasWarnings) {
                    for (var warning in data.warnings) {
                        alert(data.warnings[warning]);
                    }

                    item.html.removeClass('upload-successful').addClass('upload-failed');
                    // go out from success function by calling onError function
                    // in this case we have a animation there
                    // you can also response in PHP with 404
                    return this.onError ? this.onError(item) : null;
                }

                item.html.find('.fileuploader-action-remove').addClass('fileuploader-action-success');
                setTimeout(function() {
                    item.html.find('.progress-bar2').fadeOut(400);
                }, 400);
            },
            onError: function(item) {
                var progressBar = item.html.find('.progress-bar2');

                if(progressBar.length) {
                    progressBar.find('span').html(0 + "%");
                    progressBar.find('.fileuploader-progressbar .bar').width(0 + "%");
                    item.html.find('.progress-bar2').fadeOut(400);
                }

                item.upload.status != 'cancelled' && item.html.find('.fileuploader-action-retry').length == 0 ? item.html.find('.column-actions').prepend(
                    '<a class="fileuploader-action fileuploader-action-retry" title="Retry"><i></i></a>'
                ) : null;
            },
            onProgress: function(data, item) {
                var progressBar = item.html.find('.progress-bar2');

                if(progressBar.length > 0) {
                    progressBar.show();
                    progressBar.find('span').html(data.percentage + "%");
                    progressBar.find('.fileuploader-progressbar .bar').width(data.percentage + "%");
                }
            },
            onComplete: null,
        },
        editor: {},
        fileMaxSize: 1.95,
        extensions: ['jpg', 'jpeg', 'png', 'gif'],
        thumbnails: {
            onItemShow: function(item) {
                // add sorter button to the item html
                item.html.find('.fileuploader-action-remove').before('<a class="fileuploader-action fileuploader-action-sort" title="Sort"><i></i></a>');
            }
        },
        sorter: {
            selectorExclude: null,
            placeholder: null,
            scrollContainer: window,
            onSort: function(list, listEl, parentEl, newInputEl, inputEl) {}
        },
        onListInput: function(list, fileList, listInputEl, listEl, parentEl, newInputEl, inputEl) {
            list.forEach(function (el, i) {
                el.name = fileList[i].name;
                el.type = fileList[i].type;
                el.size = fileList[i].size;
                el.data = fileList[i].data;
                el.tmpFilePath = el.data.tmpFilePath;
            });

            return list;
        },
        onRemove: function(item, listEl, parentEl, newInputEl, inputEl) {
            if ('listingFileId' in item.data) {
                $.post('{{ path('app_listing_file_remove') }}', {
                    listingFileId: item.data.listingFileId
                });
            }

            return true;
        },
        files: {{ listingFilesForJavascript | default([]) | json_encode | raw }},
        captions: {
            button: function(options) { return Translator.trans('trans.Browse') + ' ' + (options.limit == 1 ? Translator.trans('trans.file') : Translator.trans('trans.files')); },
            feedback: function(options) { return Translator.trans('trans.Chose') + ' ' + (options.limit == 1 ? Translator.trans('trans.file') : Translator.trans('trans.files')) + ' ' + Translator.trans('trans.to upload'); },
            feedback2: function(options) { return options.length + ' ' + (options.length > 1 ? ' ' + Translator.trans('trans.files were chosen') : ' ' + Translator.trans('trans.file was chosen')); },
            confirm: Translator.trans('trans.Confirm'),
            cancel: Translator.trans('trans.Cancel'),
            name: Translator.trans('trans.Name'),
            type: Translator.trans('trans.Type'),
            size: Translator.trans('trans.Size'),
            dimensions: Translator.trans('trans.Dimensions'),
            duration: Translator.trans('trans.Duration'),
            crop: Translator.trans('trans.Crop'),
            rotate: Translator.trans('trans.Rotate'),
            sort: Translator.trans('trans.Sort'),
            download: Translator.trans('trans.Download'),
            remove: Translator.trans('trans.Remove'),
            drop: Translator.trans('trans.Drop the files here to Upload'),
            paste: '<div class="fileuploader-pending-loader"></div> '+ Translator.trans('trans.Pasting a file, click here to cancel') +'.',
            removeConfirmation: Translator.trans('trans.Are you sure you want to remove this file?'),
            errors: {
                filesLimit: Translator.trans('trans.Only ${limit} files are allowed to be uploaded'),
                filesType: Translator.trans('trans.Only ${extensions} files are allowed to be uploaded'),
                fileSize: Translator.trans('trans.${name} is too large! Please choose a file up to ${fileMaxSize}MB'),
                filesSizeAll: Translator.trans('trans.Files that you chose are too large! Please upload files up to ${maxSize} MB'),
                fileName: Translator.trans('trans.File with the name ${name} is already selected'),
                folderUpload: Translator.trans('trans.You are not allowed to upload folders'),
            }
        }
    });
</script>
