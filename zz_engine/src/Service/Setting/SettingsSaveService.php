<?php

declare(strict_types=1);

namespace App\Service\Setting;

use App\Entity\System\Setting;
use App\Enum\AppCacheEnum;
use App\Enum\RuntimeCacheEnum;
use App\Helper\DateHelper;
use App\Helper\FilePath;
use App\Helper\StringHelper;
use App\Service\System\Cache\RuntimeCacheService;
use App\Service\System\FlashBag\FlashService;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\PropertyAccess\PropertyAccess;
use Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface;
use Symfony\Contracts\Cache\CacheInterface;

class SettingsSaveService
{
    /**
     * @var SettingsService
     */
    private $settingsService;

    /**
     * @var FlashService
     */
    private $flashService;

    /**
     * @var RuntimeCacheService
     */
    private $runtimeCache;

    /**
     * @var PropertyInfoExtractorInterface
     */
    private $propertyInfoExtractor;

    /**
     * @var CacheInterface
     */
    private $cache;

    /**
     * @var EntityManagerInterface
     */
    private $em;

    /**
     * @var LoggerInterface
     */
    private $logger;

    public function __construct(
        SettingsService $settingsService,
        FlashService $flashService,
        RuntimeCacheService $runtimeCache,
        PropertyInfoExtractorInterface $propertyInfoExtractor,
        CacheInterface $cache,
        EntityManagerInterface $em,
        LoggerInterface $logger
    ) {
        $this->settingsService = $settingsService;
        $this->flashService = $flashService;
        $this->propertyInfoExtractor = $propertyInfoExtractor;
        $this->runtimeCache = $runtimeCache;
        $this->cache = $cache;
        $this->em = $em;
        $this->logger = $logger;
    }

    public function save(SettingsDto $settingsDto): void
    {
        $properties = $this->propertyInfoExtractor->getProperties(SettingsDto::class);
        $propertyAccessor = PropertyAccess::createPropertyAccessor();
        $settingList = $this->settingsService->getSettingsIndexedByName();
        $currentDate = DateHelper::create();

        foreach ($properties as $property) {
            $setting = null;
            if (\array_key_exists($property, $settingList)) {
                /** @var Setting $setting */
                $setting = $settingList[$property];

                if ($setting->getName() !== $property) {
                    throw new \RuntimeException('setting and property name do not match');
                }
            } else {
                $setting = new Setting();
                $setting->setName($property);
            }
            $setting->setValue(StringHelper::toString($propertyAccessor->getValue($settingsDto, $property)));
            $setting->setLastUpdateDate($currentDate);
            $this->em->persist($setting);
        }

        $this->em->flush();
        $this->cache->delete(AppCacheEnum::SETTINGS);
        $this->runtimeCache->delete(RuntimeCacheEnum::SETTINGS);

        $this->saveConfigFile();
    }

    public function getSettingsDtoWithoutCache(): SettingsDto
    {
        return $this->settingsService->getSettingsDtoWithoutCache();
    }

    private function saveConfigFile(): void
    {
        try {
            $settingsDto = $this->getSettingsDtoWithoutCache();
            $configPath = FilePath::getEngineDir().'/.env.local.php';
            if (!\file_exists($configPath)) {
                $this->logger->critical('could not found .env.local.php');
            }
            /** @noinspection PhpIncludeInspection */
            $oldConfig = include $configPath;
            $newConfig = \array_merge($oldConfig, [
                'APP_LOCALE' => $settingsDto->getLanguageIso(),
                'APP_TIMEZONE' => $settingsDto->getTimezone(),
                'APP_DATE_FORMAT' => $settingsDto->getDateFormat(),
                'APP_DATE_FORMAT_SHORT' => $settingsDto->getDateFormatShort(),
            ]);

            if (empty(\array_diff_assoc($newConfig, $oldConfig))) {
                return;
            }
            $configPhpString = \var_export($newConfig, true);
            $configFileContent = <<<EOF
<?php

declare(strict_types=1);

// This file was generated by running install script

return {$configPhpString};

EOF;

            \file_put_contents(
                FilePath::getProjectDir().'/zz_engine/.env.local.php',
                $configFileContent,
                \LOCK_EX,
            );
        } catch (\Throwable $e) {
            $this->flashService->addFlash(
                FlashService::ERROR_ABOVE_FORM,
                'Could not save to config file .env.local.php. Check permissions and logs.'
            );
        }
    }
}
